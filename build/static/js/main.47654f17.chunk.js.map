{"version":3,"sources":["pages/home/Home.js","pages/contact/Contact.js","pages/products/Products.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","slideInterval","getFigures","bind","moveForward","startPlayback","document","getElementById","getElementsByTagName","pointer","figures","this","length","className","setTimeout","id","class","src","alt","Component","Contact","Products","BasicExample","href","to","exact","path","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6UAIqBA,G,wDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,cAAgB,IACrB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBALN,E,yDASf,OAAOG,SAASC,eAAe,YAAYC,qBAAqB,Y,oCAKhE,IAFC,IAAIC,EAAU,EACXC,EAAUC,KAAKT,aACN,EAAOQ,EAAQE,QACK,YAAzBF,EADK,GACMG,YACXH,EAFK,GAEMG,UAAY,SACvBJ,EAHK,GAObC,EAAQD,GAASI,UAAY,UAC7BC,WAAWH,KAAKP,YAAaO,KAAKV,iB,sCAGlCa,WAAWH,KAAKP,YAAaO,KAAKV,iB,0CAIlCU,KAAKN,kB,+BAIL,OAAO,6BACH,yBAAKU,GAAG,YACJ,4BAAQC,MAAM,WACV,yBAAKA,MAAM,YAAYC,IAAI,oBAAoBC,IAAI,SAEvD,4BAAQF,MAAM,UACV,yBAAKA,MAAM,YAAYC,IAAI,mBAAmBC,IAAI,SAEtD,4BAAQF,MAAM,UACV,yBAAKA,MAAM,YAAYC,IAAI,mBAAmBC,IAAI,e,GA3CpCC,cCFnB,SAASC,IACpB,OACE,6BACE,wCCKO,SAASC,IACpB,OACE,6BACE,yC,MCQO,SAASC,IACtB,OACE,6BACA,kBAAC,IAAD,KACE,gCACE,yBAAKP,GAAG,UACN,yBAAKF,UAAU,aACb,wBAAIA,UAAU,QAAO,uBAAGU,KAAK,cAAR,oBACrB,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,aAAT,aAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,gBAOV,6BASE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAACL,EAAD,OAEF,kBAAC,IAAD,CAAOK,KAAK,YACV,kBAACN,EAAD,UAKN,4BAAQL,GAAG,eACX,yBAAKA,GAAG,cACN,4BACE,4BAAI,uBAAGQ,KAAK,cAAR,SACJ,4BAAI,uBAAGA,KAAK,gBAAR,YACJ,4BAAI,uBAAGA,KAAK,gBAAR,cAIR,uBAAGA,KAAK,4BAA4BI,OAAO,SAASC,IAAI,sBAAsBf,UAAU,kBAAxF,YACA,uBAAGU,KAAK,2BAA2BI,OAAO,SAASC,IAAI,sBAAsBf,UAAU,kBAAvF,WACA,uBAAGU,KAAK,6BAA6BI,OAAO,SAASC,IAAI,sBAAsBf,UAAU,mBAAzF,aACA,uBAAGU,KAAK,2BAA2BI,OAAO,SAASC,IAAI,sBAAsBf,UAAU,iBAAvF,WACA,kECnEcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAASC,eAAe,SDyHpB,kBAAmB8B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.47654f17.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport './Home.css';\n\n\nexport default class Home extends Component {\n    constructor(props) {\n        super(props);\n        this.slideInterval = 5000;\n        this.getFigures = this.getFigures.bind(this);\n        this.moveForward = this.moveForward.bind(this);\n        this.startPlayback = this.startPlayback.bind(this);\n\n    }\n     getFigures() {\n        return document.getElementById('carousel').getElementsByTagName('figure');\n    }\n     moveForward() {\n         var pointer = 0\n        var figures = this.getFigures();\n        for (var i = 0; i < figures.length;) {\n            if (figures[i].className === 'visible') {\n                figures[i].className = 'hidden';\n                pointer = i;\n            }\n        }\n\n        figures[pointer].className = 'visible';\n        setTimeout(this.moveForward, this.slideInterval);\n    }\n     startPlayback() {\n        setTimeout(this.moveForward, this.slideInterval);\n    }\n\n    componentDidMount() {\n        this.startPlayback();\n\n    }\n    render() {\n        return <div>\n            <div id=\"carousel\">\n                <figure class=\"visible\">\n                    <img class=\"slideshow\" src=\"./img/image1.jpeg\" alt=\"img\" />\n                </figure>\n                <figure class=\"hidden\">\n                    <img class=\"slideshow\" src=\"./img/image4.jpg\" alt=\"img\" />\n                </figure>\n                <figure class=\"hidden\">\n                    <img class=\"slideshow\" src=\"./img/image5.jpg\" alt=\"img\" />\n                </figure>\n            </div>\n\n        </div>\n\n    }\n}","import React from \"react\";\n\nexport default function Contact() {\n    return (\n      <div>\n        <h2>Contact</h2>\n      </div>\n    );\n  }\n  ","import React from \"react\";\n\n//create a component for products *live in component folder\n//element for filter for brand, price.\n//Drop down brand filter.\n//double text price filter. \n//Filter needs to update state.\n//handle filter change method\n\n\nexport default function Products() {\n    return (\n      <div>\n        <h2>Products</h2>\n      </div>\n    );\n  }\n  ","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Home from './pages/home/Home';\nimport Contact from './pages/contact/Contact';\nimport Products from './pages/products/Products'\nimport './App.css';\n\n// This site has 3 pages, all of which are rendered\n// dynamically in the browser (not server rendered).\n//\n// Although the page does not ever refresh, notice how\n// React Router keeps the URL up to date as you navigate\n// through the site. This preserves the browser history,\n// making sure things like the back button and bookmarks\n// work properly.\n\nexport default function BasicExample() {\n  return (\n    <div>\n    <Router>\n      <header>\n        <nav id=\"navbar\">\n          <div className=\"container\">\n            <h1 className=\"logo\"><a href=\"index.html\">Tearing Jerkies</a></h1>\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/products\">Products</Link>\n              </li>\n              <li>\n                <Link to=\"/contact\">Contact</Link>\n              </li>\n            </ul>\n          </div>\n        </nav>\n      </header>\n\n      <div>\n\n        {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/products\">\n            <Products />\n          </Route>\n          <Route path=\"/contact\">\n            <Contact />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n      <footer id=\"main-footer\">\n      <nav id=\"footer-nav\">\n        <ul>\n          <li><a href=\"index.html\">Home</a></li>\n          <li><a href=\"product.html\">Product</a></li>\n          <li><a href=\"contact.html\">Contact</a></li>\n        </ul>\n      </nav>\n  \n      <a href=\"https://www.facebook.com/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"fa fa-facebook\">Facebook</a>\n      <a href=\"https://www.twitter.com/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"fa fa-twitter \">Twitter</a>\n      <a href=\"https://www.instagram.com/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"fa fa-instagram\">Instagram</a>\n      <a href=\"https://www.youtube.com/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"fa fa-youtube\">Youtube</a>\n      <p>AV &copy; 2020, All Rights Reserved</p>\n  \n    </footer>\n</div>  \n  );\n}\n\n// You can think of these components as \"pages\"\n// in your app.\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}